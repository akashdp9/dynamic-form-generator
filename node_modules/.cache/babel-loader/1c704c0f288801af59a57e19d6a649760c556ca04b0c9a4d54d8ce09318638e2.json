{"ast":null,"code":"var _jsxFileName = \"/home/akash/dynamic-form-generator/src/components/Form.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport FormField from './FormField';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Form = () => {\n  _s();\n  const [fields, setFields] = useState([]);\n  const [selectedFieldType, setSelectedFieldType] = useState('text');\n  const [dropdownOptions, setDropdownOptions] = useState('');\n  const [errors, setErrors] = useState([]);\n  const addField = () => {\n    if (selectedFieldType === 'dropdown') {\n      setFields([...fields, {\n        type: selectedFieldType,\n        value: '',\n        options: dropdownOptions.split(',')\n      }]);\n    } else {\n      setFields([...fields, {\n        type: selectedFieldType,\n        value: ''\n      }]);\n    }\n  };\n  const removeField = index => {\n    const updatedFields = [...fields];\n    updatedFields.splice(index, 1);\n    setFields(updatedFields);\n  };\n  const handleChange = (index, value) => {\n    const updatedFields = [...fields];\n    updatedFields[index].value = value;\n    setFields(updatedFields);\n  };\n  const validateForm = () => {\n    const errors = [];\n    fields.forEach((field, index) => {\n      if (field.type === 'text' || field.type === 'textarea') {\n        if (field.value.trim() === '') {\n          errors.push(`Field ${index + 1} is required.`);\n        }\n      }\n    });\n    setErrors(errors);\n    return errors.length === 0;\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    const isValid = validateForm();\n    if (isValid) {\n      // Handle form submission here\n      console.log('Form submitted successfully:', fields);\n    } else {\n      console.log('Form contains errors:', errors);\n    }\n  };\n  const saveConfig = () => {\n    const configData = JSON.stringify(fields);\n    // Save configData as needed (e.g., to local storage)\n    localStorage.setItem('formConfig', configData);\n    console.log('Form configuration saved:', configData);\n  };\n  const loadConfig = () => {\n    // Load saved configuration (e.g., from local storage)\n    const savedConfigData = localStorage.getItem('formConfig');\n    if (savedConfigData) {\n      const parsedConfig = JSON.parse(savedConfigData);\n      setFields(parsedConfig);\n      console.log('Form configuration loaded:', parsedConfig);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"fieldType\",\n          children: \"Field Type:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"fieldType\",\n          value: selectedFieldType,\n          onChange: e => setSelectedFieldType(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"text\",\n            children: \"Text Input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"textarea\",\n            children: \"Text Area\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"dropdown\",\n            children: \"Dropdown\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"checkbox\",\n            children: \"Checkbox\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"radio\",\n            children: \"Radio Button\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this), selectedFieldType === 'dropdown' && /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter options separated by commas\",\n          value: dropdownOptions,\n          onChange: e => setDropdownOptions(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: addField,\n          children: \"Add Field\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), errors.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"errors\",\n        children: errors.map((error, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: error\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }, this), fields.map((field, index) => /*#__PURE__*/_jsxDEV(FormField, {\n        index: index,\n        field: field,\n        handleChange: handleChange,\n        removeField: removeField\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: saveConfig,\n        children: \"Save Configuration\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: loadConfig,\n        children: \"Load Configuration\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n};\n_s(Form, \"S8OTx5DVjpp1oIeAKsqHe3hhtXY=\");\n_c = Form;\nexport default Form;\nvar _c;\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["React","useState","FormField","jsxDEV","_jsxDEV","Form","_s","fields","setFields","selectedFieldType","setSelectedFieldType","dropdownOptions","setDropdownOptions","errors","setErrors","addField","type","value","options","split","removeField","index","updatedFields","splice","handleChange","validateForm","forEach","field","trim","push","length","handleSubmit","e","preventDefault","isValid","console","log","saveConfig","configData","JSON","stringify","localStorage","setItem","loadConfig","savedConfigData","getItem","parsedConfig","parse","children","onSubmit","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","onChange","target","placeholder","onClick","className","map","error","_c","$RefreshReg$"],"sources":["/home/akash/dynamic-form-generator/src/components/Form.js"],"sourcesContent":["import React, { useState } from 'react';\nimport FormField from './FormField';\n\nconst Form = () => {\n    const [fields, setFields] = useState([]);\n    const [selectedFieldType, setSelectedFieldType] = useState('text');\n    const [dropdownOptions, setDropdownOptions] = useState('');\n    const [errors, setErrors] = useState([]);\n\n    const addField = () => {\n        if (selectedFieldType === 'dropdown') {\n            setFields([...fields, { type: selectedFieldType, value: '', options: dropdownOptions.split(',') }]);\n        } else {\n            setFields([...fields, { type: selectedFieldType, value: '' }]);\n        }\n    };\n\n    const removeField = (index) => {\n        const updatedFields = [...fields];\n        updatedFields.splice(index, 1);\n        setFields(updatedFields);\n    };\n\n    const handleChange = (index, value) => {\n        const updatedFields = [...fields];\n        updatedFields[index].value = value;\n        setFields(updatedFields);\n    };\n\n    const validateForm = () => {\n        const errors = [];\n        fields.forEach((field, index) => {\n            if (field.type === 'text' || field.type === 'textarea') {\n                if (field.value.trim() === '') {\n                    errors.push(`Field ${index + 1} is required.`);\n                }\n            }\n        });\n        setErrors(errors);\n        return errors.length === 0;\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        const isValid = validateForm();\n        if (isValid) {\n            // Handle form submission here\n            console.log('Form submitted successfully:', fields);\n        } else {\n            console.log('Form contains errors:', errors);\n        }\n    };\n\n    const saveConfig = () => {\n        const configData = JSON.stringify(fields);\n        // Save configData as needed (e.g., to local storage)\n        localStorage.setItem('formConfig', configData);\n        console.log('Form configuration saved:', configData);\n    };\n\n    const loadConfig = () => {\n        // Load saved configuration (e.g., from local storage)\n        const savedConfigData = localStorage.getItem('formConfig');\n        if (savedConfigData) {\n            const parsedConfig = JSON.parse(savedConfigData);\n            setFields(parsedConfig);\n            console.log('Form configuration loaded:', parsedConfig);\n        }\n    };\n\n    return (\n        <div>\n            <form onSubmit={handleSubmit}>\n                <div>\n                    <label htmlFor=\"fieldType\">Field Type:</label>\n                    <select\n                        id=\"fieldType\"\n                        value={selectedFieldType}\n                        onChange={(e) => setSelectedFieldType(e.target.value)}\n                    >\n                        <option value=\"text\">Text Input</option>\n                        <option value=\"textarea\">Text Area</option>\n                        <option value=\"dropdown\">Dropdown</option>\n                        <option value=\"checkbox\">Checkbox</option>\n                        <option value=\"radio\">Radio Button</option>\n                    </select>\n                    {selectedFieldType === 'dropdown' && (\n                        <input\n                            type=\"text\"\n                            placeholder=\"Enter options separated by commas\"\n                            value={dropdownOptions}\n                            onChange={(e) => setDropdownOptions(e.target.value)}\n                        />\n                    )}\n                    <button type=\"button\" onClick={addField}>Add Field</button>\n                </div>\n                {errors.length > 0 && (\n                    <div className=\"errors\">\n                        {errors.map((error, index) => (\n                            <p key={index}>{error}</p>\n                        ))}\n                    </div>\n                )}\n                {fields.map((field, index) => (\n                    <FormField\n                        key={index}\n                        index={index}\n                        field={field}\n                        handleChange={handleChange}\n                        removeField={removeField}\n                    />\n                ))}\n                <button type=\"submit\">Submit</button>\n            </form>\n            <div>\n                <button onClick={saveConfig}>Save Configuration</button>\n                <button onClick={loadConfig}>Load Configuration</button>\n            </div>\n        </div>\n    );\n};\n\nexport default Form;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,SAAS,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACf,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACQ,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGT,QAAQ,CAAC,MAAM,CAAC;EAClE,MAAM,CAACU,eAAe,EAAEC,kBAAkB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACY,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAExC,MAAMc,QAAQ,GAAGA,CAAA,KAAM;IACnB,IAAIN,iBAAiB,KAAK,UAAU,EAAE;MAClCD,SAAS,CAAC,CAAC,GAAGD,MAAM,EAAE;QAAES,IAAI,EAAEP,iBAAiB;QAAEQ,KAAK,EAAE,EAAE;QAAEC,OAAO,EAAEP,eAAe,CAACQ,KAAK,CAAC,GAAG;MAAE,CAAC,CAAC,CAAC;IACvG,CAAC,MAAM;MACHX,SAAS,CAAC,CAAC,GAAGD,MAAM,EAAE;QAAES,IAAI,EAAEP,iBAAiB;QAAEQ,KAAK,EAAE;MAAG,CAAC,CAAC,CAAC;IAClE;EACJ,CAAC;EAED,MAAMG,WAAW,GAAIC,KAAK,IAAK;IAC3B,MAAMC,aAAa,GAAG,CAAC,GAAGf,MAAM,CAAC;IACjCe,aAAa,CAACC,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;IAC9Bb,SAAS,CAACc,aAAa,CAAC;EAC5B,CAAC;EAED,MAAME,YAAY,GAAGA,CAACH,KAAK,EAAEJ,KAAK,KAAK;IACnC,MAAMK,aAAa,GAAG,CAAC,GAAGf,MAAM,CAAC;IACjCe,aAAa,CAACD,KAAK,CAAC,CAACJ,KAAK,GAAGA,KAAK;IAClCT,SAAS,CAACc,aAAa,CAAC;EAC5B,CAAC;EAED,MAAMG,YAAY,GAAGA,CAAA,KAAM;IACvB,MAAMZ,MAAM,GAAG,EAAE;IACjBN,MAAM,CAACmB,OAAO,CAAC,CAACC,KAAK,EAAEN,KAAK,KAAK;MAC7B,IAAIM,KAAK,CAACX,IAAI,KAAK,MAAM,IAAIW,KAAK,CAACX,IAAI,KAAK,UAAU,EAAE;QACpD,IAAIW,KAAK,CAACV,KAAK,CAACW,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;UAC3Bf,MAAM,CAACgB,IAAI,CAAE,SAAQR,KAAK,GAAG,CAAE,eAAc,CAAC;QAClD;MACJ;IACJ,CAAC,CAAC;IACFP,SAAS,CAACD,MAAM,CAAC;IACjB,OAAOA,MAAM,CAACiB,MAAM,KAAK,CAAC;EAC9B,CAAC;EAED,MAAMC,YAAY,GAAIC,CAAC,IAAK;IACxBA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,MAAMC,OAAO,GAAGT,YAAY,CAAC,CAAC;IAC9B,IAAIS,OAAO,EAAE;MACT;MACAC,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAE7B,MAAM,CAAC;IACvD,CAAC,MAAM;MACH4B,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEvB,MAAM,CAAC;IAChD;EACJ,CAAC;EAED,MAAMwB,UAAU,GAAGA,CAAA,KAAM;IACrB,MAAMC,UAAU,GAAGC,IAAI,CAACC,SAAS,CAACjC,MAAM,CAAC;IACzC;IACAkC,YAAY,CAACC,OAAO,CAAC,YAAY,EAAEJ,UAAU,CAAC;IAC9CH,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEE,UAAU,CAAC;EACxD,CAAC;EAED,MAAMK,UAAU,GAAGA,CAAA,KAAM;IACrB;IACA,MAAMC,eAAe,GAAGH,YAAY,CAACI,OAAO,CAAC,YAAY,CAAC;IAC1D,IAAID,eAAe,EAAE;MACjB,MAAME,YAAY,GAAGP,IAAI,CAACQ,KAAK,CAACH,eAAe,CAAC;MAChDpC,SAAS,CAACsC,YAAY,CAAC;MACvBX,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEU,YAAY,CAAC;IAC3D;EACJ,CAAC;EAED,oBACI1C,OAAA;IAAA4C,QAAA,gBACI5C,OAAA;MAAM6C,QAAQ,EAAElB,YAAa;MAAAiB,QAAA,gBACzB5C,OAAA;QAAA4C,QAAA,gBACI5C,OAAA;UAAO8C,OAAO,EAAC,WAAW;UAAAF,QAAA,EAAC;QAAW;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAC9ClD,OAAA;UACImD,EAAE,EAAC,WAAW;UACdtC,KAAK,EAAER,iBAAkB;UACzB+C,QAAQ,EAAGxB,CAAC,IAAKtB,oBAAoB,CAACsB,CAAC,CAACyB,MAAM,CAACxC,KAAK,CAAE;UAAA+B,QAAA,gBAEtD5C,OAAA;YAAQa,KAAK,EAAC,MAAM;YAAA+B,QAAA,EAAC;UAAU;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACxClD,OAAA;YAAQa,KAAK,EAAC,UAAU;YAAA+B,QAAA,EAAC;UAAS;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAC3ClD,OAAA;YAAQa,KAAK,EAAC,UAAU;YAAA+B,QAAA,EAAC;UAAQ;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAC1ClD,OAAA;YAAQa,KAAK,EAAC,UAAU;YAAA+B,QAAA,EAAC;UAAQ;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAC1ClD,OAAA;YAAQa,KAAK,EAAC,OAAO;YAAA+B,QAAA,EAAC;UAAY;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvC,CAAC,EACR7C,iBAAiB,KAAK,UAAU,iBAC7BL,OAAA;UACIY,IAAI,EAAC,MAAM;UACX0C,WAAW,EAAC,mCAAmC;UAC/CzC,KAAK,EAAEN,eAAgB;UACvB6C,QAAQ,EAAGxB,CAAC,IAAKpB,kBAAkB,CAACoB,CAAC,CAACyB,MAAM,CAACxC,KAAK;QAAE;UAAAkC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvD,CACJ,eACDlD,OAAA;UAAQY,IAAI,EAAC,QAAQ;UAAC2C,OAAO,EAAE5C,QAAS;UAAAiC,QAAA,EAAC;QAAS;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1D,CAAC,EACLzC,MAAM,CAACiB,MAAM,GAAG,CAAC,iBACd1B,OAAA;QAAKwD,SAAS,EAAC,QAAQ;QAAAZ,QAAA,EAClBnC,MAAM,CAACgD,GAAG,CAAC,CAACC,KAAK,EAAEzC,KAAK,kBACrBjB,OAAA;UAAA4C,QAAA,EAAgBc;QAAK,GAAbzC,KAAK;UAAA8B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAC5B;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CACR,EACA/C,MAAM,CAACsD,GAAG,CAAC,CAAClC,KAAK,EAAEN,KAAK,kBACrBjB,OAAA,CAACF,SAAS;QAENmB,KAAK,EAAEA,KAAM;QACbM,KAAK,EAAEA,KAAM;QACbH,YAAY,EAAEA,YAAa;QAC3BJ,WAAW,EAAEA;MAAY,GAJpBC,KAAK;QAAA8B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKb,CACJ,CAAC,eACFlD,OAAA;QAAQY,IAAI,EAAC,QAAQ;QAAAgC,QAAA,EAAC;MAAM;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnC,CAAC,eACPlD,OAAA;MAAA4C,QAAA,gBACI5C,OAAA;QAAQuD,OAAO,EAAEtB,UAAW;QAAAW,QAAA,EAAC;MAAkB;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACxDlD,OAAA;QAAQuD,OAAO,EAAEhB,UAAW;QAAAK,QAAA,EAAC;MAAkB;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAAChD,EAAA,CArHID,IAAI;AAAA0D,EAAA,GAAJ1D,IAAI;AAuHV,eAAeA,IAAI;AAAC,IAAA0D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}